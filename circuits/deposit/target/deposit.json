{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":8466080476200639667,"abi":{"parameters":[{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"asset","type":{"kind":"field"},"visibility":"public"},{"name":"liquidity","type":{"kind":"field"},"visibility":"public"},{"name":"timestamp","type":{"kind":"field"},"visibility":"public"},{"name":"leaf","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"23":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"24":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"25":{"source":"pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n","path":"std/hash/poseidon/mod.nr"},"62":{"source":"use dep::std::hash::poseidon;\n\nfn main(secret: Field, nullifier: Field, asset: pub Field, liquidity: pub Field, timestamp: pub Field, leaf: pub Field) {\n    let hash_0 = poseidon::bn254::hash_2([secret, nullifier]);\n    let hash_1 = poseidon::bn254::hash_2([asset, liquidity]);\n    let hash_2 = poseidon::bn254::hash_2([hash_0, hash_1]);\n    let _leaf = poseidon::bn254::hash_2([hash_2, timestamp]);\n\n    // assert proposed leaf matches certain constraints\n    assert(_leaf == leaf);\n}\n\n#[test]\nfn test_main() {\n    let secret = 0;\n    let nullifier = 0;\n    let asset = 0;\n    let liquidity = 50000000000000000;\n    let timestamp = 1731753946; // Sat Nov 16 2024 04:54:06 GMT+0000\n\n    let hash_0 = poseidon::bn254::hash_2([secret, nullifier]);\n    let hash_1 = poseidon::bn254::hash_2([asset, liquidity]);\n    let hash_2 = poseidon::bn254::hash_2([hash_0, hash_1]);\n    let _leaf = poseidon::bn254::hash_2([hash_2, timestamp]);\n\n    println(_leaf);\n    \n    main(secret, nullifier, asset, liquidity, timestamp, _leaf);\n\n    let nulifier_hash = poseidon::bn254::hash_1([nullifier]);\n    println(nulifier_hash);\n\n}\n\n","path":"/Users/master/tornado-2.0/circuits/deposit/src/main.nr"}},"names":["main"],"brillig_names":[]}